{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItems.js","components/GifGrid.js","hooks/useFetchGifs.js","components/GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItems","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"yMAEaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACRC,mBAAS,IADD,mBACrCC,EADqC,KACzBC,EADyB,KAY5C,OACI,8BACG,sBAAMC,SAXM,SAACC,GAChBA,EAAEC,iBACEJ,EAAWK,OAAOC,SAClBR,GAAc,SAAAS,GAAI,OAAGP,GAAH,mBAAiBO,OACnCN,EAAc,MAOf,SACC,uBACAO,KAAK,OACLC,MAAOT,EACPU,SACI,YAA0B,IAAbD,EAAY,EAAtBE,OAAUF,MACbR,EAAcQ,W,+BCnBjBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAWH,GAF/C,+DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDCDPO,EAAe,SAAC,GAAmB,EAAlBJ,GAAmB,IAAhBC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAEnC,OACI,sBAAKc,UAAU,0CAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCFHO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDb,SAAEA,GAAe,IAAD,EAEdd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KA0BxC,OAnBAC,qBAAW,WAEHxB,EAASC,GAERwB,MAAM,SAAAC,GAEHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAMtB,CAACpB,IAKGqB,EDvBuBK,CAAa1B,GAA9Ba,EAFwB,EAE7BN,KAAaa,EAFgB,EAEhBA,QAErB,OACI,qCACA,oBAAIJ,UAAU,qCAAd,SAAoDhB,IACpD,sBAAKgB,UAAU,YAAf,UAEQI,GAAW,mBAAGJ,UAAU,mCAAb,sBAIXH,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEIA,GADCA,EAAIC,cEQdgB,EAvBK,WAAK,IAAD,EACgBzC,mBAAS,CAAC,2BAD1B,mBACb0C,EADa,KACD3C,EADC,KAKpB,OACI,qCACI,8CACA,uBACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEQ2C,EAAWnB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCbtC6B,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.4626d07b.chunk.js","sourcesContent":["import React,{useState} from 'react'\nimport PropTypes from 'prop-types';\nexport const AddCategory = ({setCategories}) => {\n    const [inputValue, setInputValue] = useState('');\n\n    const handleSubmit=(e)=>{\n        e.preventDefault();\n        if (inputValue.trim().length){\n            setCategories(cats=>[inputValue,...cats])\n            setInputValue('');\n        }\n        \n    }\n\n    return (\n        <div>            \n           <form onSubmit={handleSubmit}>\n            <input \n            type=\"text\"\n            value={inputValue}\n            onChange={\n                ({ target: { value } })=>{\n                setInputValue(value)\n                }\n            \n\n            }\n            />\n        </form>\n        </div>\n    )\n}\n\n\nAddCategory.propTypes={\n    setCategories: PropTypes.func.isRequired\n}","\n\n\nexport const getGifs = async( category ) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=A8xMXqzieIHmtO3BjGLAtf1daSSDAv8K`;\n    const resp = await fetch( url );\n    const { data } = await resp.json();\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    return gifs;\n\n\n}","import React from 'react'\n\nexport const GifGridItems = ({id,title,url}) => {\n\n    return (\n        <div className=\"card animate__animated animate__fadeIn \">\n            <img src={url} alt={title}/>\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React from 'react'\n// import { getGifs } from '../helpers/getGifs';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItems } from './GifGridItems';\n\nexport const GifGrid = ({ category }) => {\n \n    const { data:images, loading}=useFetchGifs(category)\n\n    return (\n        <>\n        <h3 className=\" animate__animated animate__fadeIn\">{category}</h3>\n        <div className=\"card-grid\">\n            {\n                loading && <p className=\"animate__animated animate__flash\">Cargando</p>\n            }\n            \n            {\n                images.map(img => (\n                    <GifGridItems \n                    key={img.id}\n                    {...img} />\n                ))\n            }\n\n        </div>\n        </>\n    )\n}\n","import { useState, useEffect } from 'react'\nimport { getGifs } from '../helpers/getGifs';\n\n\nexport const useFetchGifs = ( category ) => {\n    \n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect( () => {\n        \n            getGifs( category )\n        \n            .then( imgs => {\n                \n                setState({\n                    data: imgs,\n                    loading: false\n                });\n            })\n        \n       \n\n    }, [category])\n\n\n\n\n    return state; // { data:[], loading: true };\n\n\n}\n\n\n","import React, {useState} from 'react'\nimport { AddCategory } from './AddCategory';\nimport { GifGrid } from './GifGrid';\n\n\nconst GifExpertApp= ()=>{\n    const [categories, setCategories] = useState(['Caballeros del Zodiaco']);\n\n\n   \n    return(\n        <>\n            <h2>GifExpertApp</h2>\n            <hr/>\n            <AddCategory setCategories={setCategories}/>\n            <ol>\n                {\n                    categories.map(category =>\n                        <GifGrid key={category} category={category}/>\n                    )\n                }\n            </ol>\n        </>\n    )\n}\n\n\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './components/GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  \n    <GifExpertApp />\n  ,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}